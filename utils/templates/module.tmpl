package {{.PackageName}}

import (
    "base/app/models"
    "base/core/app/authorization"
    "base/core/module"
    "base/core/logger"
    "base/core/router"
    "base/core/storage"
    "base/core/emitter"{{if .HasTranslatableFields}}
    "base/core/translation"{{end}}
    "errors"

    "gorm.io/gorm"
)

type Module struct {
    module.DefaultModule
    DB         *gorm.DB
    Service    *{{.Service}}
    Controller *{{.Controller}}{{if .HasTranslatableFields}}
    TranslationHelper *translation.Helper{{end}}
}

// Init creates and initializes the {{.Model}} module with all dependencies
func Init(deps module.Dependencies) module.Module {
    {{if .HasTranslatableFields}}// Create translation service and helper
    translationService := translation.NewTranslationService(deps.DB, deps.Emitter, deps.Storage, deps.Logger)
    translationHelper := translation.NewHelper(translationService)
    
    // Initialize service with translation helper
    service := New{{.Service}}(deps.DB, deps.Emitter, deps.Storage, deps.Logger, translationHelper){{else}}// Initialize service and controller
    service := New{{.Service}}(deps.DB, deps.Emitter, deps.Storage, deps.Logger){{end}}
    controller := New{{.Controller}}(service, deps.Storage)
    
    // Create module
    mod := &Module{
        DB:         deps.DB,
        Service:    service,
        Controller: controller,{{if .HasTranslatableFields}}
        TranslationHelper: translationHelper,{{end}}
    }
    
    return mod
}

// Routes registers the module routes
func (m *Module) Routes(router *router.RouterGroup) {
    m.Controller.Routes(router)
}

func (m *Module) Init() error {
    // Auto-migrate the model
    if err := m.Migrate(); err != nil {
        return err
    }

    return m.SeedPermissions()
}

func (m *Module) SeedPermissions() error {
    // Ensure permissions table exists before seeding
    if err := m.DB.AutoMigrate(&authorization.Permission{}); err != nil {
        return err
    }

    // Define permissions for {{.ModelSnake}} CRUD operations
    {{.ModelSnake}}Permissions := []authorization.Permission{
        {
            Name:         "{{.ModelSnake}} list",
            Description:  "View {{.ModelSnake}} list",
            ResourceType: "{{.ModelSnake}}",
            Action:       "list",
        },
        {
            Name:         "{{.ModelSnake}} read",
            Description:  "View {{.ModelSnake}} details",
            ResourceType: "{{.ModelSnake}}",
            Action:       "read",
        },
        {
            Name:         "{{.ModelSnake}} create",
            Description:  "Create new {{.PluralSnake}}",
            ResourceType: "{{.ModelSnake}}",
            Action:       "create",
        },
        {
            Name:         "{{.ModelSnake}} update",
            Description:  "Update {{.ModelSnake}} information",
            ResourceType: "{{.ModelSnake}}",
            Action:       "update",
        },
        {
            Name:         "{{.ModelSnake}} delete",
            Description:  "Delete {{.PluralSnake}}",
            ResourceType: "{{.ModelSnake}}",
            Action:       "delete",
        },
    }

    // Upsert permissions - create or update if they exist
    for _, permission := range {{.ModelSnake}}Permissions {
        var existingPermission authorization.Permission
        result := m.DB.Where("resource_type = ? AND action = ?", permission.ResourceType, permission.Action).First(&existingPermission)

        if result.Error != nil && errors.Is(result.Error, gorm.ErrRecordNotFound) {
            // Create new permission
            if err := m.DB.Create(&permission).Error; err != nil {
                return err
            }
        } else if result.Error == nil {
            // Update existing permission
            existingPermission.Name = permission.Name
            existingPermission.Description = permission.Description
            if err := m.DB.Save(&existingPermission).Error; err != nil {
                return err
            }
        } else {
            // Return any other error
            return result.Error
        }
    }

    return nil
}

func (m *Module) Migrate() error {
    return m.DB.AutoMigrate(&models.{{.Model}}{}{{range .Fields}}{{if or (eq .Relationship "many_to_many") (eq .Relationship "manyToMany") (eq .Relationship "toMany") (eq .Relationship "to_many") (eq .Type "to_many") }}, &models.{{$.Model}}{{.RelatedModel}}{}{{end}}{{end}})
}

func (m *Module) GetModels() []any {
    return []any{
        &models.{{.Model}}{},{{range .Fields}}{{if or (eq .Relationship "many_to_many") (eq .Relationship "manyToMany") (eq .Relationship "toMany") (eq .Relationship "to_many") (eq .Type "to_many")}}
        &models.{{$.Model}}{{.RelatedModel}}{},{{end}}{{end}}
    }
}