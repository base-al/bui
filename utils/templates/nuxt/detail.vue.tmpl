<template>
  <UDashboardPanel v-if="item">
    <template #body>
      <div class="space-y-6">
        <!-- Page Header -->
        <div class="flex flex-col sm:flex-row gap-6 items-start sm:items-center justify-between">
          <div class="flex items-center gap-4">
            <UButton
              icon="i-lucide-arrow-left"
              variant="ghost"
              size="sm"
              @click="goBack"
            />
            <div class="space-y-1">
              <h1 class="text-2xl font-bold text-gray-900 dark:text-gray-100">{{.Model}} Details</h1>
              <p class="text-sm text-gray-600 dark:text-gray-400">View {{.ModelLower}} information</p>
            </div>
          </div>

          <div class="flex gap-2">
            <CommonPermissionButton
              permission="{{.ModelSnake}}:update"
              icon="i-lucide-pencil"
              variant="outline"
              @click="handleEdit"
            >
              Edit
            </CommonPermissionButton>
            <CommonPermissionButton
              permission="{{.ModelSnake}}:delete"
              icon="i-lucide-trash"
              color="error"
              variant="outline"
              @click="handleDelete"
            >
              Delete
            </CommonPermissionButton>
          </div>
        </div>

    <!-- Content -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <UCard>
        <template #header>
          <h2 class="text-lg font-semibold">Information</h2>
        </template>

        <div class="space-y-4">
{{range .Fields}}{{if .ShowInDetail}}          <div>
            <label class="text-sm text-gray-600 dark:text-gray-400">{{.Label}}</label>
            <p class="text-base font-medium">{{`{{ item.`}}{{.JSONName}}{{` }}`}}</p>
          </div>
{{end}}{{end}}        </div>
      </UCard>

      <UCard>
        <template #header>
          <h2 class="text-lg font-semibold">Metadata</h2>
        </template>

        <div class="space-y-4">
          <div>
            <label class="text-sm text-gray-600 dark:text-gray-400">Created At</label>
            <p class="text-base font-medium">{{`{{ formatDateTime(item.created_at) }}`}}</p>
          </div>
          <div>
            <label class="text-sm text-gray-600 dark:text-gray-400">Updated At</label>
            <p class="text-base font-medium">{{`{{ formatDateTime(item.updated_at) }}`}}</p>
          </div>
        </div>
      </UCard>
    </div>

    <!-- Edit Modal -->
    <{{.Model}}FormModal
      v-model="showEditModal"
      :item="item"
      :loading="submitting"
      @submit="handleSubmit"
    />

    <!-- Delete Modal -->
    <CommonConfirmationModal
      v-model="showDeleteModal"
      title="Delete {{.Model}}"
      message="Are you sure you want to delete this {{.ModelLower}}?"
      confirm-text="Delete"
      confirm-color="error"
      :loading="deleting"
      @confirm="confirmDelete"
    />
      </div>
    </template>
  </UDashboardPanel>

  <UDashboardPanel v-else-if="loading">
    <template #body>
      <div class="flex items-center justify-center py-12">
        <UIcon name="i-lucide-loader-2" class="w-8 h-8 animate-spin text-gray-400" />
      </div>
    </template>
  </UDashboardPanel>

  <UDashboardPanel v-else>
    <template #body>
      <div class="flex flex-col items-center justify-center py-12 gap-3">
        <UIcon name="i-lucide-file-x" class="w-12 h-12 text-gray-400 dark:text-gray-500" />
        <p class="text-lg text-gray-500 dark:text-gray-400">{{.Model}} not found</p>
        <UButton @click="goBack">Go Back</UButton>
      </div>
    </template>
  </UDashboardPanel>
</template>

<script setup lang="ts">
import { ref, onMounted } from 'vue'
import { use{{.Plural}}Store } from '~/modules/{{.PluralSnake}}/stores/{{.PluralSnake}}'
import type { Update{{.Model}}Input } from '~/modules/{{.PluralSnake}}/types/{{.ModelSnake}}'
import {{.Model}}FormModal from '~/modules/{{.PluralSnake}}/components/{{.Model}}FormModal.vue'

definePageMeta({
  layout: 'default',
})

const route = useRoute()
const router = useRouter()
const {{.VarPlural}}Store = use{{.Plural}}Store()
const toast = useToast()

const item = ref()
const loading = ref(false)
const showEditModal = ref(false)
const showDeleteModal = ref(false)
const deleting = ref(false)
const submitting = ref(false)

const id = computed(() => parseInt(route.params.id as string))

const formatDateTime = (dateString: string) => {
  return new Date(dateString).toLocaleString()
}

const goBack = () => {
  router.push('/app/{{.PluralKebab}}')
}

const handleEdit = () => {
  showEditModal.value = true
}

const handleDelete = () => {
  showDeleteModal.value = true
}

const handleSubmit = async (data: Update{{.Model}}Input) => {
  submitting.value = true
  try {
    await {{.VarPlural}}Store.update{{.Model}}(id.value, data)
    toast.add({
      title: 'Success',
      description: '{{.Model}} updated successfully',
      color: 'success',
    })
    showEditModal.value = false
    // Refresh the item data
    item.value = await {{.VarPlural}}Store.fetch{{.Model}}(id.value)
  } catch (error: any) {
    toast.add({
      title: 'Error',
      description: error.message || 'Failed to update {{.ModelLower}}',
      color: 'error',
    })
  } finally {
    submitting.value = false
  }
}

const confirmDelete = async () => {
  deleting.value = true
  try {
    await {{.VarPlural}}Store.delete{{.Model}}(id.value)
    toast.add({
      title: 'Success',
      description: '{{.Model}} deleted successfully',
      color: 'success',
    })
    router.push('/app/{{.PluralKebab}}')
  } catch (error: any) {
    toast.add({
      title: 'Error',
      description: error.message || 'Failed to delete {{.ModelLower}}',
      color: 'error',
    })
  } finally {
    deleting.value = false
  }
}

onMounted(async () => {
  loading.value = true
  try {
    item.value = await {{.VarPlural}}Store.fetch{{.Model}}(id.value)
  } catch (error: any) {
    toast.add({
      title: 'Error',
      description: error.message || 'Failed to fetch {{.ModelLower}}',
      color: 'error',
    })
  } finally {
    loading.value = false
  }
})
</script>
