<template>
   <UModal 
  v-model:open="isOpen" 
  :ui="{ content: 'max-w-6xl' }"
  :title="isEdit ? 'Edit `{{.Model}}' : 'Create `{{.Model}}'"
  :description="isEdit ? 'Edit `{{.Model}}' : 'Create `{{.Model}}'"
  >
    <template #body>
    <form @submit.prevent="handleSubmit" class="space-y-6">
      <!-- Basic Information -->
      <div class="space-y-4">
        <h3 class="text-sm font-semibold text-gray-700 dark:text-gray-300">Basic Information</h3>

        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
{{range .Fields}}{{if .ShowInForm}}{{if .IsMedia}}          <MediaField
            v-model="form.{{.MediaFKJSONName}}"
            label="{{.Label}}"
            {{if .IsRequired}}required{{end}}
            accept="image"
            class="sm:col-span-2"
          />
{{else if or .IsAttachment .IsFile .IsImage}}          <AttachmentField
            v-model="form.{{.JSONName}}"
            label="{{.Label}}"
            {{if .IsRequired}}required{{end}}
            accept="{{if .IsImage}}image/*{{else if .IsFile}}*/*{{else}}*/*{{end}}"
            class="sm:col-span-2"
          />
{{else if eq .FormType "text"}}          <UFormField label="{{.Label}}" {{if .IsRequired}}required{{end}} class="sm:col-span-2">
            <UInput
              v-model="form.{{.JSONName}}"
              placeholder="Enter {{.LabelLower}}"
            />
          </UFormField>
{{else if eq .FormType "textarea"}}          <UFormField label="{{.Label}}" {{if .IsRequired}}required{{end}} class="sm:col-span-2">
            <UTextarea
              v-model="form.{{.JSONName}}"
              placeholder="Enter {{.LabelLower}}"
              :rows="{{.FormRows}}"
            />
          </UFormField>
{{else if and .IsSelect (eq .SelectType "select")}}          <UFormField label="{{.Label}}" {{if .IsRequired}}required{{end}}>
            <USelect
              v-model="form.{{.JSONName}}"
              :items="{{.JSONName}}Options"
              placeholder="Select {{.LabelLower}}"
            />
          </UFormField>
{{else if and .IsSelect (eq .SelectType "radio")}}          <UFormField label="{{.Label}}" {{if .IsRequired}}required{{end}}>
            <URadioGroup
              v-model="form.{{.JSONName}}"
              :items="{{.JSONName}}Options"
            />
          </UFormField>
{{else if and .IsSelect (eq .SelectType "checkbox")}}          <UFormField label="{{.Label}}" {{if .IsRequired}}required{{end}} class="sm:col-span-2">
            <UCheckboxGroup
              v-model="form.{{.JSONName}}"
              :items="{{.JSONName}}Options"
            />
          </UFormField>
{{else if eq .FormType "select"}}          <UFormField label="{{.Label}}" {{if .IsRequired}}required{{end}}>
            <USelect
              v-model="form.{{.JSONName}}"
              :items="{{.JSONName}}OptionsFormatted"
              :ui="{ content: 'min-w-fit' }"
              placeholder="Select {{.LabelLower}}"
            />
          </UFormField>
{{else if eq .FormType "checkbox"}}          <UFormField>
            <UCheckbox
              v-model="form.{{.JSONName}}"
              label="{{.Label}}"
            />
          </UFormField>
{{else if eq .FormType "number"}}          <UFormField label="{{.Label}}" {{if .IsRequired}}required{{end}}>
            <UInput
              v-model="form.{{.JSONName}}"
              type="number"
              placeholder="Enter {{.LabelLower}}"
            />
          </UFormField>
{{else if eq .FormType "date"}}          <UFormField label="{{.Label}}" {{if .IsRequired}}required{{end}}>
            <UInput
              v-model="form.{{.JSONName}}"
              type="date"
            />
          </UFormField>
{{else if eq .FormType "datetime"}}          <UFormField label="{{.Label}}" {{if .IsRequired}}required{{end}}>
            <UInput
              v-model="form.{{.JSONName}}"
              type="datetime-local"
            />
          </UFormField>
{{else}}          <UFormField label="{{.Label}}" {{if .IsRequired}}required{{end}}>
            <UInput
              v-model="form.{{.JSONName}}"
              placeholder="Enter {{.LabelLower}}"
            />
          </UFormField>
{{end}}
{{else if and .IsRelation (eq .Relationship "belongs_to")}}          <UFormField label="{{.RelationLabel}}" {{if .IsRequired}}required{{end}}>
            <USelect
              v-model="form.{{.JSONName}}"
              :items="{{.RelationObjectName}}OptionsFormatted"
              :ui="{ content: 'min-w-fit' }"
              placeholder="Select {{.RelationObjectName}}"
            />
          </UFormField>
{{else if and .IsRelation (eq .Relationship "many_to_many")}}          <UFormField label="{{.RelationLabel}}" {{if .IsRequired}}required{{end}} class="sm:col-span-2">
            <UInputMenu
              v-model="form.{{.JSONName}}"
              :items="{{.RelationObjectName}}OptionsFormatted"
              multiple
              placeholder="Select {{.RelationLabel}}"
            />
          </UFormField>
{{end}}{{end}}        </div>
      </div>

    </form>
    </template>
    <template #footer>
      <div class="flex justify-end gap-2">
        <UButton
          type="button"
          color="neutral"
          variant="outline"
          @click="closeModal"
        >
          Cancel
        </UButton>
        <UButton
          type="submit"
          :loading="props.loading"
          @click="handleSubmit"
        >
          {{`{{ isEdit ? 'Update' : 'Create' }}`}}
        </UButton>
      </div>
    </template>
  </UModal>
</template>

<script setup lang="ts">
import { ref, computed, watch, onMounted } from 'vue'
import type { Create{{.Model}}Input, Update{{.Model}}Input, {{.Model}} } from '../types/{{.ModelSnake}}'

const props = defineProps<{
  modelValue: boolean
  item?: {{.Model}}
  loading?: boolean
}>()

const emit = defineEmits<{
  'update:modelValue': [value: boolean]
  submit: [data: Create{{.Model}}Input | Update{{.Model}}Input]
}>()

const isOpen = computed({
  get: () => props.modelValue,
  set: (value) => emit('update:modelValue', value),
})

const isEdit = computed(() => !!props.item)

const form = ref<Create{{.Model}}Input>({
{{range .Fields}}{{if .ShowInForm}}  {{if .IsMedia}}{{.MediaFKJSONName}}{{else}}{{.JSONName}}{{end}}: {{.DefaultValue}},
{{else if and .IsRelation (eq .Relationship "belongs_to")}}  {{.JSONName}}: undefined as any,
{{else if and .IsRelation (eq .Relationship "many_to_many")}}  {{.JSONName}}: [],
{{end}}{{end}}})
{{range .Fields}}{{if and .IsRelation (eq .Relationship "belongs_to")}}
const {{.RelationObjectName}}Options = ref<Array<{ id: number; {{.RelationDisplayField}}: string }>>([])
const {{.RelationObjectName}}OptionsFormatted = computed(() =>
  ({{.RelationObjectName}}Options.value || []).map(item => ({ label: item.{{.RelationDisplayField}}, value: item.id }))
)
{{else if and .IsRelation (eq .Relationship "many_to_many")}}
const {{.RelationObjectName}}Options = ref<Array<{ id: number; {{.RelationDisplayField}}: string }>>([])
const {{.RelationObjectName}}OptionsFormatted = computed(() =>
  ({{.RelationObjectName}}Options.value || []).map(item => ({ label: item.{{.RelationDisplayField}}, value: item.id }))
)
{{end}}{{end}}
{{range .Fields}}{{if .IsSelect}}
// Options for {{.Label}} ({{.SelectType}})
const {{.JSONName}}Options = [
  {{range .Options}}{ label: '{{.}}', value: '{{.}}' },
  {{end}}]
{{end}}{{end}}

const handleSubmit = () => {
  // Format datetime-local fields to include seconds for backend
  const submissionData = { ...form.value }
{{range .Fields}}{{if eq .FormType "datetime"}}  if (submissionData.{{.JSONName}} && submissionData.{{.JSONName}}.length === 16) {
    // datetime-local format is "YYYY-MM-DDTHH:MM", add seconds
    submissionData.{{.JSONName}} = submissionData.{{.JSONName}} + ':00'
  }
{{end}}{{end}}  emit('submit', submissionData)
}

const closeModal = () => {
  isOpen.value = false
  resetForm()
}

const resetForm = () => {
  form.value = {
{{range .Fields}}{{if .ShowInForm}}    {{if .IsMedia}}{{.MediaFKJSONName}}{{else}}{{.JSONName}}{{end}}: {{.DefaultValue}},
{{else if and .IsRelation (eq .Relationship "belongs_to")}}    {{.JSONName}}: undefined as any,
{{else if and .IsRelation (eq .Relationship "many_to_many")}}    {{.JSONName}}: [],
{{end}}{{end}}  }
}

// Helper to extract string from translation field
const getStringValue = (field: any): string => {
  if (typeof field === 'string') return field
  if (typeof field === 'object' && field?.original) return field.original
  return ''
}

{{range .Fields}}{{if and .IsRelation (eq .Relationship "belongs_to")}}// Fetch {{.RelationObjectName}} options
const fetch{{.RelatedModel}}Options = async () => {
  try {
    const api = useApi()
    const response = await api.get<Array<{ id: number; {{.RelationDisplayField}}: string }>>('/{{.RelationModelKebab}}/all')
    {{.RelationObjectName}}Options.value = response
  } catch (error) {
    console.error('Failed to fetch {{.RelationObjectName}} options:', error)
  }
}
{{else if and .IsRelation (eq .Relationship "many_to_many")}}// Fetch {{.RelationObjectName}} options
const fetch{{.RelatedModel}}Options = async () => {
  try {
    const api = useApi()
    const response = await api.get<Array<{ id: number; {{.RelationDisplayField}}: string }>>('/{{.RelationModelKebab}}/all')
    {{.RelationObjectName}}Options.value = response
  } catch (error) {
    console.error('Failed to fetch {{.RelationObjectName}} options:', error)
  }
}
{{end}}{{end}}

// Watch for item prop changes
watch(() => props.item, (item) => {
  if (item) {
    form.value = {
{{range .Fields}}{{if .ShowInForm}}      {{if .IsMedia}}{{.MediaFKJSONName}}: item.{{.JSONName}}?.id || item.{{.MediaFKJSONName}}{{else if .IsTranslation}}{{.JSONName}}: getStringValue(item.{{.JSONName}}){{else}}{{.JSONName}}: item.{{.JSONName}}{{end}}{{if .IsNullable}} || {{.DefaultValue}}{{end}},
{{else if and .IsRelation (eq .Relationship "belongs_to")}}      {{.JSONName}}: item.{{.JSONName}} || undefined,
{{else if and .IsRelation (eq .Relationship "many_to_many")}}      {{.JSONName}}: (item.{{.JSONName}} || []).map((rel: any) => rel.id),
{{end}}{{end}}    }
  } else {
    resetForm()
  }
}, { immediate: true })

onMounted(() => {
{{range .Fields}}{{if and .IsRelation (eq .Relationship "belongs_to")}}  fetch{{.RelatedModel}}Options()
{{else if and .IsRelation (eq .Relationship "many_to_many")}}  fetch{{.RelatedModel}}Options()
{{end}}{{end}}})
</script>
