<template>
  <UDashboardPanel>
    <template #body>
      <div class="space-y-6">
        <!-- Page Header -->
        <div class="flex flex-col sm:flex-row gap-6 items-start sm:items-center justify-between">
          <div class="space-y-1">
            <h1 class="text-2xl font-bold text-gray-900 dark:text-gray-100">{{.Plural}}</h1>
            <p class="text-sm text-gray-600 dark:text-gray-400">
              Manage your {{.PluralLower}}
            </p>
          </div>

          <CommonPermissionButton
            permission="{{.ModelSnake}}:create"
            icon="i-lucide-plus"
            @click="handleCreate"
          >
            Create {{.Model}}
          </CommonPermissionButton>
        </div>

    <!-- Table -->
    <!--
      Using BaseTable for consistent UX across all modules.
      If you need custom functionality, you can replace this with UTable directly.
      DO NOT modify BaseTable component - create a custom table component instead.
    -->
    <UCard>
      <BaseTable
        :data="{{.VarPlural}}"
        :columns="columns"
        :loading="loading"
        table-name="{{.Plural}}"
        search-column="{{range .Fields}}{{if eq .JSONName "name"}}name{{end}}{{end}}"
        search-placeholder="Search {{.PluralLower}}..."
        :pagination="{
          current_page: pagination.page,
          per_page: pagination.limit,
          total: pagination.total
        }"
        :context-menu-items="getContextMenuItems"
        :on-row-click="handleView"
        @page-change="handlePageChange"
        @per-page-change="handlePerPageChange"
      />
    </UCard>

    <!-- Form Modal -->
    <{{.Model}}FormModal
      v-model="showFormModal"
      :item="selectedItem"
      :loading="submitting"
      @submit="handleSubmit"
    />

    <!-- Delete Confirmation Modal -->
    <CommonConfirmationModal
      v-model="showDeleteModal"
      title="Delete {{.Model}}"
      message="Are you sure you want to delete this {{.ModelLower}}?"
      confirm-text="Delete"
      confirm-color="error"
      :loading="deleting"
      @confirm="confirmDelete"
    />
      </div>
    </template>
  </UDashboardPanel>
</template>

<script setup lang="ts">
import { ref, onMounted, h } from 'vue'
import { storeToRefs } from 'pinia'
import type { TableColumn, ContextMenuItem } from '@nuxt/ui'
import { use{{.Plural}}Store } from '~/modules/{{.PluralSnake}}/stores/{{.PluralSnake}}'
import type { {{.Model}}, Create{{.Model}}Input, Update{{.Model}}Input } from '~/modules/{{.PluralSnake}}/types/{{.ModelSnake}}'
import {{.Model}}FormModal from '~/modules/{{.PluralSnake}}/components/{{.Model}}FormModal.vue'
import TranslationField from '@@/app/components/translation/TranslationField.vue'
import TableMediaField from '@@/app/components/media/TableMediaField.vue'

definePageMeta({
  layout: 'default',
})

const {{.VarPlural}}Store = use{{.Plural}}Store()
const { {{.VarPlural}}, loading, pagination } = storeToRefs({{.VarPlural}}Store)
const toast = useToast()

const showFormModal = ref(false)
const showDeleteModal = ref(false)
const selectedItem = ref<{{.Model}} | undefined>()
const deleting = ref(false)
const submitting = ref(false)

// Table columns definition
const columns: TableColumn<{{.Model}}>[] = [
{{range .Fields}}{{if .ShowInTable}}  {
    accessorKey: '{{.JSONName}}',
    header: '{{.Label}}',
{{- if .IsTranslation}}
    cell: ({ row }) => {
      return h(TranslationField, {
        field: '{{.JSONName}}',
        value: row.original.{{.JSONName}},
        modelId: row.original.id,
        modelType: '{{$.ModelSnake}}',
      })
    }
{{- else if .IsMedia}}
    cell: ({ row }) => {
      return h(TableMediaField, {
        value: row.original.{{.JSONName}},
      })
    }
{{- end}}
  },
{{end}}{{end}}  {
    accessorKey: 'created_at',
    header: 'Created',
  },
]

// Context menu for row actions
const getContextMenuItems = (row: {{.Model}}): ContextMenuItem[] => [
  {
    label: 'View',
    icon: 'i-lucide-eye',
    click: () => handleView(row),
  },
  {
    label: 'Edit',
    icon: 'i-lucide-pencil',
    click: () => handleEdit(row),
  },
  {
    label: 'Delete',
    icon: 'i-lucide-trash',
    click: () => handleDelete(row),
  },
]

const handleCreate = () => {
  selectedItem.value = undefined
  showFormModal.value = true
}

const handleEdit = (item: {{.Model}}) => {
  selectedItem.value = item
  showFormModal.value = true
}

const handleView = (item: {{.Model}}) => {
  navigateTo(`/app/{{.PluralKebab}}/${item.id}`)
}

const handleDelete = (item: {{.Model}}) => {
  selectedItem.value = item
  showDeleteModal.value = true
}

const handleSubmit = async (data: Create{{.Model}}Input | Update{{.Model}}Input) => {
  submitting.value = true
  try {
    if (selectedItem.value) {
      await {{.VarPlural}}Store.update{{.Model}}(selectedItem.value.id, data as Update{{.Model}}Input)
      toast.add({
        title: 'Success',
        description: '{{.Model}} updated successfully',
        color: 'success',
      })
    } else {
      await {{.VarPlural}}Store.create{{.Model}}(data as Create{{.Model}}Input)
      toast.add({
        title: 'Success',
        description: '{{.Model}} created successfully',
        color: 'success',
      })
    }
    showFormModal.value = false
    await {{.VarPlural}}Store.fetch{{.Plural}}()
  } catch (error: any) {
    toast.add({
      title: 'Error',
      description: error.message || 'Failed to save {{.ModelLower}}',
      color: 'error',
    })
  } finally {
    submitting.value = false
  }
}

const confirmDelete = async () => {
  if (!selectedItem.value) return

  deleting.value = true
  try {
    await {{.VarPlural}}Store.delete{{.Model}}(selectedItem.value.id)
    toast.add({
      title: 'Success',
      description: '{{.Model}} deleted successfully',
      color: 'success',
    })
    showDeleteModal.value = false
  } catch (error: any) {
    toast.add({
      title: 'Error',
      description: error.message || 'Failed to delete {{.ModelLower}}',
      color: 'error',
    })
  } finally {
    deleting.value = false
  }
}

const handlePageChange = (page: number) => {
  {{.VarPlural}}Store.fetch{{.Plural}}(page)
}

const handlePerPageChange = (perPage: number) => {
  {{.VarPlural}}Store.setPerPage(perPage)
  {{.VarPlural}}Store.fetch{{.Plural}}(1)
}

onMounted(() => {
  {{.VarPlural}}Store.fetch{{.Plural}}()
})
</script>
