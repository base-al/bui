<template>
  <UDashboardPanel>
    <template #body>
      <div class="space-y-6">
        <!-- Page Header -->
        <div class="flex flex-col sm:flex-row gap-6 items-start sm:items-center justify-between">
          <div class="space-y-1">
            <h1 class="text-2xl font-bold text-gray-900 dark:text-gray-100">{{.Plural}}</h1>
            <p class="text-sm text-gray-600 dark:text-gray-400">
              Manage your {{.PluralLower}}
            </p>
          </div>

          <CommonPermissionButton
            permission="{{.ModelSnake}}:create"
            icon="i-lucide-plus"
            @click="handleCreate"
          >
            Create {{.Model}}
          </CommonPermissionButton>
        </div>

    <!-- Filters -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
      <UInput
        v-model="filters.search"
        icon="i-lucide-search"
        placeholder="Search {{.PluralLower}}..."
        @update:model-value="applyFilters"
      />
    </div>

    <!-- Table -->
    <UCard>
      <{{.Model}}Table
        :{{.VarPlural}}="{{.VarPlural}}"
        :loading="loading"
        :pagination="pagination"
        @edit="handleEdit"
        @delete="handleDelete"
        @view="handleView"
        @page-change="handlePageChange"
      />
    </UCard>

    <!-- Form Modal -->
    <{{.Model}}FormModal
      v-model="showFormModal"
      :item="selectedItem"
      :loading="submitting"
      @submit="handleSubmit"
    />

    <!-- Delete Confirmation Modal -->
    <UModal v-model="showDeleteModal">
      <template #header>
        Delete {{.Model}}
      </template>

      <template #body>
        <div class="space-y-4">
          <p>Are you sure you want to delete this {{.ModelLower}}?</p>
        </div>
      </template>

      <template #footer>
        <div class="flex justify-end gap-2">
          <UButton
            color="neutral"
            variant="outline"
            @click="showDeleteModal = false"
          >
            Cancel
          </UButton>
          <UButton
            color="error"
            :loading="deleting"
            @click="confirmDelete"
          >
            Delete
          </UButton>
        </div>
      </template>
    </UModal>
      </div>
    </template>
  </UDashboardPanel>
</template>

<script setup lang="ts">
import { ref, reactive, onMounted } from 'vue'
import { storeToRefs } from 'pinia'
import { use{{.Plural}}Store } from '~/modules/{{.PluralSnake}}/stores/{{.PluralSnake}}'
import type { {{.Model}}, Create{{.Model}}Input, Update{{.Model}}Input } from '~/modules/{{.PluralSnake}}/types/{{.ModelSnake}}'
import {{.Model}}Table from '~/modules/{{.PluralSnake}}/components/{{.Model}}Table.vue'
import {{.Model}}FormModal from '~/modules/{{.PluralSnake}}/components/{{.Model}}FormModal.vue'

definePageMeta({
  layout: 'default',
})

const {{.VarPlural}}Store = use{{.Plural}}Store()
const { {{.VarPlural}}, loading, pagination } = storeToRefs({{.VarPlural}}Store)
const toast = useToast()

const showFormModal = ref(false)
const showDeleteModal = ref(false)
const selectedItem = ref<{{.Model}} | undefined>()
const deleting = ref(false)
const submitting = ref(false)

const filters = reactive({
  search: '',
})

const applyFilters = () => {
  {{.VarPlural}}Store.setFilters(filters)
  {{.VarPlural}}Store.fetch{{.Plural}}()
}

const handleCreate = () => {
  selectedItem.value = undefined
  showFormModal.value = true
}

const handleEdit = (item: {{.Model}}) => {
  selectedItem.value = item
  showFormModal.value = true
}

const handleView = (item: {{.Model}}) => {
  navigateTo(`/app/{{.PluralKebab}}/${item.id}`)
}

const handleDelete = (item: {{.Model}}) => {
  selectedItem.value = item
  showDeleteModal.value = true
}

const handleSubmit = async (data: Create{{.Model}}Input | Update{{.Model}}Input) => {
  submitting.value = true
  try {
    if (selectedItem.value) {
      await {{.VarPlural}}Store.update{{.Model}}(selectedItem.value.id, data as Update{{.Model}}Input)
      toast.add({
        title: 'Success',
        description: '{{.Model}} updated successfully',
        color: 'success',
      })
    } else {
      await {{.VarPlural}}Store.create{{.Model}}(data as Create{{.Model}}Input)
      toast.add({
        title: 'Success',
        description: '{{.Model}} created successfully',
        color: 'success',
      })
    }
    showFormModal.value = false
    await {{.VarPlural}}Store.fetch{{.Plural}}()
  } catch (error: any) {
    toast.add({
      title: 'Error',
      description: error.message || 'Failed to save {{.ModelLower}}',
      color: 'error',
    })
  } finally {
    submitting.value = false
  }
}

const confirmDelete = async () => {
  if (!selectedItem.value) return

  deleting.value = true
  try {
    await {{.VarPlural}}Store.delete{{.Model}}(selectedItem.value.id)
    toast.add({
      title: 'Success',
      description: '{{.Model}} deleted successfully',
      color: 'success',
    })
    showDeleteModal.value = false
  } catch (error: any) {
    toast.add({
      title: 'Error',
      description: error.message || 'Failed to delete {{.ModelLower}}',
      color: 'error',
    })
  } finally {
    deleting.value = false
  }
}

const handlePageChange = (page: number) => {
  {{.VarPlural}}Store.fetch{{.Plural}}(page)
}

onMounted(() => {
  {{.VarPlural}}Store.fetch{{.Plural}}()
})
</script>
