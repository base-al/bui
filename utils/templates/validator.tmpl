package {{ .PackageName }}

import (
	"{{.ModuleName}}/app/models"
	"{{.ModuleName}}/core/validator"
)

// Global validator instance using Base core validator wrapper
var validate = validator.New()

// Validate{{ .Model }}CreateRequest validates the create request
func Validate{{ .Model }}CreateRequest(req *models.Create{{ .Model }}Request) error {
	if req == nil {
		return validator.ValidationErrors{
			{
				Field:   "request",
				Tag:     "required",
				Value:   "nil",
				Message: "request cannot be nil",
			},
		}
	}

	// Use Base core validator
	if err := validate.Validate(req); err != nil {
		return err
	}

	// Validate select/radio fields (not checkbox - those are JSON arrays)
	{{- range .Fields}}
	{{- if and .IsSelect (ne .SelectType "checkbox")}}
	if err := validateSelectField("{{.JSONName}}", req.{{.Name}}, []string{ {{range $i, $opt := .Options}}{{if $i}}, {{end}}"{{$opt}}"{{end}} }); err != nil {
		return err
	}
	{{- end}}
	{{- end}}

	return nil
}

// Validate{{ .Model }}UpdateRequest validates the update request
func Validate{{ .Model }}UpdateRequest(req *models.Update{{ .Model }}Request, id uint) error {
	if req == nil {
		return validator.ValidationErrors{
			{
				Field:   "request",
				Tag:     "required", 
				Value:   "nil",
				Message: "request cannot be nil",
			},
		}
	}

	if id == 0 {
		return validator.ValidationErrors{
			{
				Field:   "id",
				Tag:     "required",
				Value:   "0",
				Message: "id cannot be zero",
			},
		}
	}

	// Validate select/radio fields (only if provided, not checkbox - those are JSON arrays)
	{{- range .Fields}}
	{{- if and .IsSelect (ne .SelectType "checkbox")}}
	if req.{{.Name}} != "" {
		if err := validateSelectField("{{.JSONName}}", req.{{.Name}}, []string{ {{range $i, $opt := .Options}}{{if $i}}, {{end}}"{{$opt}}"{{end}} }); err != nil {
			return err
		}
	}
	{{- end}}
	{{- end}}

	return nil
}

// Validate{{ .Model }}DeleteRequest validates the delete request
func Validate{{ .Model }}DeleteRequest(id uint) error {
	return ValidateID(id)
}

// ValidateID validates if the ID is valid
func ValidateID(id uint) error {
	if id == 0 {
		return validator.ValidationErrors{
			{
				Field:   "id",
				Tag:     "required",
				Value:   "0",
				Message: "id cannot be zero",
			},
		}
	}
	return nil
}

// validateSelectField validates if a value is in the allowed options
func validateSelectField(field string, value string, allowedOptions []string) error {
	if value == "" {
		return nil // Empty values are allowed (handled by required tag)
	}

	for _, option := range allowedOptions {
		if value == option {
			return nil
		}
	}

	return validator.ValidationErrors{
		{
			Field:   field,
			Tag:     "oneof",
			Value:   value,
			Message: "must be one of: " + joinOptions(allowedOptions),
		},
	}
}

// joinOptions joins options with commas for error messages
func joinOptions(options []string) string {
	result := ""
	for i, opt := range options {
		if i > 0 {
			result += ", "
		}
		result += opt
	}
	return result
}
